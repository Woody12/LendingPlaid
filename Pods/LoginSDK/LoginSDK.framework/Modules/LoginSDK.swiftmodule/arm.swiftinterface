// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 5.2.4 effective-4.2 (swiftlang-1103.0.32.9 clang-1103.0.32.53)
// swift-module-flags: -target armv7-apple-ios10.0 -enable-objc-interop -enable-library-evolution -swift-version 4.2 -enforce-exclusivity=checked -O -module-name LoginSDK
import CommonCrypto
import CoreData
import Foundation
import LocalAuthentication
@_exported import LoginSDK
import Swift
public enum CBORError : Swift.Error {
  case unfinishedSequence
  case wrongTypeInsideSequence
  case tooLongSequence
  case incorrectUTF8String
  public static func == (a: LoginSDK.CBORError, b: LoginSDK.CBORError) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
  public func hash(into hasher: inout Swift.Hasher)
}
extension CBOR {
  public static func decode(_ input: [Swift.UInt8]) throws -> LoginSDK.CBOR?
}
public class CBORDecoder {
  public init(stream: LoginSDK.CBORInputStream)
  public init(input: Swift.ArraySlice<Swift.UInt8>)
  public init(input: [Swift.UInt8])
  public func decodeItem() throws -> LoginSDK.CBOR?
  @objc deinit
}
public protocol CBOREncodable {
  func encode() -> [Swift.UInt8]
}
extension CBOR : LoginSDK.CBOREncodable {
  public func encode() -> [Swift.UInt8]
}
extension Int : LoginSDK.CBOREncodable {
  public func encode() -> [Swift.UInt8]
}
extension UInt : LoginSDK.CBOREncodable {
  public func encode() -> [Swift.UInt8]
}
extension UInt8 : LoginSDK.CBOREncodable {
  public func encode() -> [Swift.UInt8]
}
extension UInt16 : LoginSDK.CBOREncodable {
  public func encode() -> [Swift.UInt8]
}
extension UInt64 : LoginSDK.CBOREncodable {
  public func encode() -> [Swift.UInt8]
}
extension UInt32 : LoginSDK.CBOREncodable {
  public func encode() -> [Swift.UInt8]
}
extension String : LoginSDK.CBOREncodable {
  public func encode() -> [Swift.UInt8]
}
extension Float : LoginSDK.CBOREncodable {
  public func encode() -> [Swift.UInt8]
}
extension Double : LoginSDK.CBOREncodable {
  public func encode() -> [Swift.UInt8]
}
extension Bool : LoginSDK.CBOREncodable {
  public func encode() -> [Swift.UInt8]
}
extension Array where Element : LoginSDK.CBOREncodable {
  public func encode() -> [Swift.UInt8]
}
extension Data : LoginSDK.CBOREncodable {
  public func encode() -> [Swift.UInt8]
}
@_inheritsConvenienceInitializers @objc public class LoginFirebaseDelegate : ObjectiveC.NSObject {
  @objc deinit
  @objc override dynamic public init()
}
@_inheritsConvenienceInitializers @objc public class LoginResponse : ObjectiveC.NSObject, LoginSDK.BaseResponse {
  @objc public var success: Swift.Bool
  @objc public var errorCode: Swift.String
  @objc public var errorMessage: Swift.String
  @objc public var jwt: Swift.String
  public static func buildSuccess(jwt: Swift.String) -> LoginSDK.LoginResponse
  public static func buildFailure(errorMessage: Swift.String) -> LoginSDK.LoginResponse
  @objc deinit
  @objc override dynamic public init()
}
@_inheritsConvenienceInitializers @objc public class RegistrationCodeResponse : ObjectiveC.NSObject, LoginSDK.BaseResponse {
  @objc public var success: Swift.Bool
  @objc public var errorCode: Swift.String
  @objc public var errorMessage: Swift.String
  @objc public var registrationCode: Swift.String
  public static func buildSuccess(code: Swift.String) -> LoginSDK.RegistrationCodeResponse
  public static func buildFailure(errorMessage: Swift.String) -> LoginSDK.RegistrationCodeResponse
  @objc deinit
  @objc override dynamic public init()
}
@_inheritsConvenienceInitializers @objc public class RegisterResponse : ObjectiveC.NSObject, LoginSDK.BaseResponse {
  @objc public var success: Swift.Bool
  @objc public var errorCode: Swift.String
  @objc public var errorMessage: Swift.String
  @objc public var jwt: Swift.String
  public static func buildSuccess(jwt: Swift.String) -> LoginSDK.RegisterResponse
  public static func buildFailure(errorMessage: Swift.String) -> LoginSDK.RegisterResponse
  @objc deinit
  @objc override dynamic public init()
}
@_inheritsConvenienceInitializers @objc public class RemoteLoginResponse : ObjectiveC.NSObject, LoginSDK.BaseResponse {
  @objc public var success: Swift.Bool
  @objc public var errorCode: Swift.String
  @objc public var errorMessage: Swift.String
  @objc public var accessCode: Swift.String
  public static func buildSuccess(code: Swift.String) -> LoginSDK.RemoteLoginResponse
  public static func buildFailure(errorMessage: Swift.String) -> LoginSDK.RemoteLoginResponse
  @objc deinit
  @objc override dynamic public init()
}
extension Data {
  public init?(base64urlEncoded input: Swift.String)
  public func base64urlEncodedString() -> Swift.String
  public func hexEncodedString() -> Swift.String
}
extension UIColor {
  convenience public init(hex: Swift.String)
}
public protocol CBORInputStream {
  mutating func popByte() throws -> Swift.UInt8
  mutating func popBytes(_ n: Swift.Int) throws -> Swift.ArraySlice<Swift.UInt8>
}
indirect public enum CBOR : Swift.Equatable, Swift.Hashable, Swift.ExpressibleByNilLiteral, Swift.ExpressibleByIntegerLiteral, Swift.ExpressibleByStringLiteral, Swift.ExpressibleByArrayLiteral, Swift.ExpressibleByDictionaryLiteral, Swift.ExpressibleByBooleanLiteral, Swift.ExpressibleByFloatLiteral {
  case unsignedInt(Swift.UInt64)
  case negativeInt(Swift.UInt64)
  case byteString([Swift.UInt8])
  case utf8String(Swift.String)
  case array([LoginSDK.CBOR])
  case map([LoginSDK.CBOR : LoginSDK.CBOR])
  case tagged(LoginSDK.CBOR.Tag, LoginSDK.CBOR)
  case simple(Swift.UInt8)
  case boolean(Swift.Bool)
  case null
  case undefined
  case half(Swift.Float32)
  case float(Swift.Float32)
  case double(Swift.Float64)
  case `break`
  public var hashValue: Swift.Int {
    get
  }
  public subscript(position: LoginSDK.CBOR) -> LoginSDK.CBOR? {
    get
    set(x)
  }
  public init(nilLiteral: ())
  public init(integerLiteral value: Swift.Int)
  public init(extendedGraphemeClusterLiteral value: Swift.String)
  public init(unicodeScalarLiteral value: Swift.String)
  public init(stringLiteral value: Swift.String)
  public init(arrayLiteral elements: LoginSDK.CBOR...)
  public init(dictionaryLiteral elements: (LoginSDK.CBOR, LoginSDK.CBOR)...)
  public init(booleanLiteral value: Swift.Bool)
  public init(floatLiteral value: Swift.Float32)
  public static func == (lhs: LoginSDK.CBOR, rhs: LoginSDK.CBOR) -> Swift.Bool
  public struct Tag : Swift.RawRepresentable, Swift.Equatable, Swift.Hashable {
    public let rawValue: Swift.UInt64
    public init(rawValue: Swift.UInt64)
    public var hashValue: Swift.Int {
      get
    }
    public typealias RawValue = Swift.UInt64
  }
  public func hash(into hasher: inout Swift.Hasher)
  public typealias IntegerLiteralType = Swift.Int
  public typealias StringLiteralType = Swift.String
  public typealias ArrayLiteralElement = LoginSDK.CBOR
  public typealias Key = LoginSDK.CBOR
  public typealias Value = LoginSDK.CBOR
  public typealias BooleanLiteralType = Swift.Bool
  public typealias FloatLiteralType = Swift.Float32
  public typealias ExtendedGraphemeClusterLiteralType = Swift.String
  public typealias UnicodeScalarLiteralType = Swift.String
}
extension CBOR.Tag {
  public static let standardDateTimeString: LoginSDK.CBOR.Tag
  public static let epochBasedDateTime: LoginSDK.CBOR.Tag
  public static let positiveBignum: LoginSDK.CBOR.Tag
  public static let negativeBignum: LoginSDK.CBOR.Tag
  public static let decimalFraction: LoginSDK.CBOR.Tag
  public static let bigfloat: LoginSDK.CBOR.Tag
  public static let expectedConversionToBase64URLEncoding: LoginSDK.CBOR.Tag
  public static let expectedConversionToBase64Encoding: LoginSDK.CBOR.Tag
  public static let expectedConversionToBase16Encoding: LoginSDK.CBOR.Tag
  public static let encodedCBORDataItem: LoginSDK.CBOR.Tag
  public static let uri: LoginSDK.CBOR.Tag
  public static let base64Url: LoginSDK.CBOR.Tag
  public static let base64: LoginSDK.CBOR.Tag
  public static let regularExpression: LoginSDK.CBOR.Tag
  public static let mimeMessage: LoginSDK.CBOR.Tag
  public static let uuid: LoginSDK.CBOR.Tag
  public static let selfDescribeCBOR: LoginSDK.CBOR.Tag
}
public struct InitRegisterResponse {
}
public struct CompleteRegisterResponse {
}
public struct InitVerifyResponse {
}
public struct CompleteVerifyResposne {
}
public struct RemoteRequestResponse {
}
public struct RemoteSignResponse {
}
public struct InitRegistrationCodeResponse {
}
public struct CompleteRegistrationCodeResponse {
}
@objc @_inheritsConvenienceInitializers public class LoginHttpClient : ObjectiveC.NSObject {
  @objc deinit
  @objc override dynamic public init()
}
extension CBOR {
  public static func encode<T>(_ value: T) -> [Swift.UInt8] where T : LoginSDK.CBOREncodable
  public static func encode<T>(_ array: [T], asByteString: Swift.Bool = false) -> [Swift.UInt8] where T : LoginSDK.CBOREncodable
  public static func encode<A, B>(_ dict: [A : B]) -> [Swift.UInt8] where A : LoginSDK.CBOREncodable, A : Swift.Hashable, B : LoginSDK.CBOREncodable
  public static func encodeUInt8(_ x: Swift.UInt8) -> [Swift.UInt8]
  public static func encodeUInt16(_ x: Swift.UInt16) -> [Swift.UInt8]
  public static func encodeUInt32(_ x: Swift.UInt32) -> [Swift.UInt8]
  public static func encodeUInt64(_ x: Swift.UInt64) -> [Swift.UInt8]
  public static func encodeNegativeInt(_ x: Swift.Int64) -> [Swift.UInt8]
  public static func encodeByteString(_ bs: [Swift.UInt8]) -> [Swift.UInt8]
  public static func encodeString(_ str: Swift.String) -> [Swift.UInt8]
  public static func encodeArray<T>(_ arr: [T]) -> [Swift.UInt8] where T : LoginSDK.CBOREncodable
  public static func encodeMap<A, B>(_ map: [A : B]) -> [Swift.UInt8] where A : LoginSDK.CBOREncodable, A : Swift.Hashable, B : LoginSDK.CBOREncodable
  public static func encodeMap<A>(_ map: [A : Any?]) throws -> [Swift.UInt8] where A : LoginSDK.CBOREncodable, A : Swift.Hashable
  public static func encodeTagged<T>(tag: LoginSDK.CBOR.Tag, value: T) -> [Swift.UInt8] where T : LoginSDK.CBOREncodable
  public static func encodeSimpleValue(_ x: Swift.UInt8) -> [Swift.UInt8]
  public static func encodeNull() -> [Swift.UInt8]
  public static func encodeUndefined() -> [Swift.UInt8]
  public static func encodeBreak() -> [Swift.UInt8]
  public static func encodeFloat(_ x: Swift.Float) -> [Swift.UInt8]
  public static func encodeDouble(_ x: Swift.Double) -> [Swift.UInt8]
  public static func encodeBool(_ x: Swift.Bool) -> [Swift.UInt8]
  public static func encodeArrayStreamStart() -> [Swift.UInt8]
  public static func encodeMapStreamStart() -> [Swift.UInt8]
  public static func encodeStringStreamStart() -> [Swift.UInt8]
  public static func encodeByteStringStreamStart() -> [Swift.UInt8]
  public static func encodeStreamEnd() -> [Swift.UInt8]
  public static func encodeArrayChunk<T>(_ chunk: [T]) -> [Swift.UInt8] where T : LoginSDK.CBOREncodable
  public static func encodeMapChunk<A, B>(_ map: [A : B]) -> [Swift.UInt8] where A : LoginSDK.CBOREncodable, A : Swift.Hashable, B : LoginSDK.CBOREncodable
  public static func encodeDate(_ date: Foundation.Date) -> [Swift.UInt8]
  public static func encodeAny(_ any: Any?) throws -> [Swift.UInt8]
}
public enum CBOREncoderError : Swift.Error {
  case invalidType
  public static func == (a: LoginSDK.CBOREncoderError, b: LoginSDK.CBOREncoderError) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
  public func hash(into hasher: inout Swift.Hasher)
}
@objc public protocol BaseResponse {
  @objc var success: Swift.Bool { get set }
  @objc var errorCode: Swift.String { get set }
  @objc var errorMessage: Swift.String { get set }
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @objc public class LoginApi : ObjectiveC.NSObject {
  @objc public static let client: LoginSDK.LoginApi
  @objc public func configure(clientId: Swift.String, baseURL: Swift.String)
  @objc public func configurePushNotification()
  @objc public func updateDeviceToken(token: Swift.String)
  @objc public func setDevOrigin(origin: Swift.String)
  @objc public func getBaseURL() -> Swift.String?
  @objc public func isLoggedIn() -> Swift.Bool
  @objc public func hasAccount() -> Swift.Bool
  @objc public func getCurrentUsername() -> Swift.String?
  @objc public func getCurrentToken() -> Swift.String?
  @objc public func getCurrentAccessToken() -> Swift.String?
  @objc public func logout()
  @objc public func register(username: Swift.String?, onComplete: @escaping (LoginSDK.RegisterResponse) -> Swift.Void)
  @objc public func register(code: Swift.String?, username: Swift.String?, onComplete: @escaping (LoginSDK.RegisterResponse) -> Swift.Void)
  @objc public func login(onComplete: @escaping (LoginSDK.LoginResponse) -> Swift.Void)
  @objc public func login(username: Swift.String?, onComplete: @escaping (LoginSDK.LoginResponse) -> Swift.Void)
  @objc public func remoteLogin(session: Swift.String, onComplete: @escaping (LoginSDK.RemoteLoginResponse) -> Swift.Void)
  @objc public func registrationCodeRequest(onComplete: @escaping (LoginSDK.RegistrationCodeResponse) -> Swift.Void)
  @objc public func loadNotification(currentView: UIKit.UIViewController, userInfo: [Swift.AnyHashable : Any])
  @objc public func loadRemoteLoginView(currentView: UIKit.UIViewController, userInfo: [Swift.AnyHashable : Any])
  @objc deinit
}
extension Data {
  public var uint8: Swift.UInt8 {
    get
  }
  public var uint16: Swift.UInt16 {
    get
  }
  public var uint32: Swift.UInt32 {
    get
  }
}
extension LoginSDK.CBORError : Swift.Equatable {}
extension LoginSDK.CBORError : Swift.Hashable {}
extension LoginSDK.CBOREncoderError : Swift.Equatable {}
extension LoginSDK.CBOREncoderError : Swift.Hashable {}
